-- expensesDb.sql
-- RoleEntity
CREATE TABLE RoleEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    description TEXT
);

roleCreate:
INSERT INTO RoleEntity (name, description)
VALUES (?, ?);

roleSelectAll:
SELECT * FROM RoleEntity;

roleSelectById:
SELECT * FROM RoleEntity WHERE id = ?;

roleUpdate:
UPDATE RoleEntity
SET name = ?, description = ?
WHERE id = ?;

roleDelete:
DELETE FROM RoleEntity WHERE id = ?;

roleCount:
SELECT COUNT(*) FROM RoleEntity;

-- Relación que define en qué franquicias (unidades) se puede usar cada rol.
CREATE TABLE RoleFranchiseEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    role_id INTEGER NOT NULL REFERENCES RoleEntity(id) ON DELETE CASCADE,
    franchise_id INTEGER NOT NULL REFERENCES FranchiseEntity(id) ON DELETE CASCADE,
    UNIQUE(role_id, franchise_id)
);

-- Asignar un rol a una franquicia
roleFranchiseAssign:
INSERT INTO RoleFranchiseEntity (role_id, franchise_id)
VALUES (?, ?);

-- Eliminar la asignación de un rol en una franquicia
roleFranchiseDelete:
DELETE FROM RoleFranchiseEntity
WHERE role_id = ? AND franchise_id = ?;

-- Obtener todas las franquicias en las que se puede usar un rol
franchisesByRole:
SELECT f.* FROM FranchiseEntity f
JOIN RoleFranchiseEntity rf ON rf.franchise_id = f.id
WHERE rf.role_id = ?;

-- Obtener los roles permitidos para una franquicia específica
rolesByFranchise:
SELECT r.* FROM RoleEntity r
JOIN RoleFranchiseEntity rf ON rf.role_id = r.id
WHERE rf.franchise_id = ?;

-- Obtener roles asignables según la franquicia del usuario
assignableRolesByUser:
SELECT DISTINCT r.*
FROM RoleEntity r
JOIN RoleFranchiseEntity rf ON r.id = rf.role_id
JOIN UserEntity u ON u.franchise_id = rf.franchise_id
WHERE u.id = ?;

-- Obtener roles asignables por franquicia directa
assignableRolesByFranchise:
SELECT DISTINCT r.*
FROM RoleEntity r
JOIN RoleFranchiseEntity rf ON r.id = rf.role_id
WHERE rf.franchise_id = ?;

-- Verificar si un rol está disponible en una franquicia
isRoleAvailableInFranchise:
SELECT EXISTS(
    SELECT 1 FROM RoleFranchiseEntity
    WHERE role_id = ? AND franchise_id = ?
);

-- Obtener roles que NO están asignados a ninguna franquicia
rolesWithoutFranchises:
SELECT r.* FROM RoleEntity r
WHERE NOT EXISTS (
    SELECT 1 FROM RoleFranchiseEntity rf
    WHERE rf.role_id = r.id
);

-- Contar cuántas franquicias tienen asignado un rol
countFranchisesByRole:
SELECT COUNT(*) FROM RoleFranchiseEntity WHERE role_id = ?;

-- Contar cuántos roles están asignados a una franquicia
countRolesByFranchise:
SELECT COUNT(*) FROM RoleFranchiseEntity WHERE franchise_id = ?;

-- Obtener información detallada de asignaciones rol-franquicia
roleAssignmentDetails:
SELECT
    r.id AS role_id,
    r.name AS role_name,
    r.description AS role_description,
    rf.franchise_id AS franchise_id,
    f.name AS franchise_name
FROM RoleEntity r
LEFT JOIN RoleFranchiseEntity rf ON r.id = rf.role_id
LEFT JOIN FranchiseEntity f ON rf.franchise_id = f.id
ORDER BY r.name, f.name;

-- UserEntity
CREATE TABLE UserEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT NOT NULL UNIQUE COLLATE NOCASE,
    password TEXT NOT NULL,
    franchise_id INTEGER NOT NULL,
    active INTEGER NOT NULL DEFAULT 1 CHECK (active IN (0,1)),
    student_id INTEGER REFERENCES StudentEntity(id) ON DELETE SET NULL,
    teacher_id INTEGER REFERENCES TeacherEntity(id) ON DELETE SET NULL,
    administrative_id INTEGER REFERENCES AdministrativeEntity(id) ON DELETE SET NULL,
    FOREIGN KEY(franchise_id) REFERENCES FranchiseEntity(id)
);


lastInsertRowId:
SELECT last_insert_rowid();

CREATE INDEX IF NOT EXISTS idx_user_username ON UserEntity(username);

studentSelectByCurp:
SELECT * FROM StudentEntity
WHERE curp = ?;



-- Buscar usuario por student_id
selectUserByStudentId:
SELECT * FROM UserEntity WHERE student_id = ?;

-- Crear usuario incluyendo student_id
userCreateWithStudent:
INSERT INTO UserEntity (username, password, franchise_id, active, student_id)
VALUES (?, ?, ?, ?, ?);


userCreate:
INSERT INTO UserEntity (username, password, franchise_id, active)
VALUES (?, ?, ?, ?);

selectAllUsers:
SELECT * FROM UserEntity;

selectUserById:
SELECT * FROM UserEntity WHERE id = ?;

selectUserByUsername:
SELECT * FROM UserEntity WHERE username = ?;

updateUser:
UPDATE UserEntity
SET username = ?, password = ?
WHERE id = ?;

deleteUser:
DELETE FROM UserEntity WHERE id = ?;

countUsers:
SELECT COUNT(*) FROM UserEntity;

-- NUEVA UserRoleEntity
CREATE TABLE UserRoleEntity (
    user_id INTEGER NOT NULL REFERENCES UserEntity(id) ON DELETE CASCADE,
    role_id INTEGER NOT NULL REFERENCES RoleEntity(id) ON DELETE CASCADE,
    franchise_id INTEGER REFERENCES FranchiseEntity(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, role_id, franchise_id)
);

-- Asignar rol a usuario
userRoleAssign:
INSERT INTO UserRoleEntity (user_id, role_id, franchise_id)
VALUES (?, ?, ?);

-- Obtener roles de un usuario (con nombre del rol)
userRolesByUser:
SELECT ur.*, r.name AS role_name
FROM UserRoleEntity ur
JOIN RoleEntity r ON r.id = ur.role_id
WHERE ur.user_id = ?;


-- Eliminar un rol del usuario
userRoleDelete:
DELETE FROM UserRoleEntity
WHERE user_id = ? AND role_id = ? AND franchise_id = ?;

-- FranchiseEntity
CREATE TABLE FranchiseEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    email TEXT,
    phone TEXT,
    base_price REAL,
    currency TEXT,
    address_street TEXT,
    address_number TEXT,
    address_neighborhood TEXT,
    address_zip TEXT,
    address_city TEXT,
    address_country TEXT,
    tax_name TEXT,
    tax_id TEXT,
    zone TEXT,
    is_new INTEGER NOT NULL DEFAULT 0,
    active INTEGER NOT NULL DEFAULT 1
);

franchiseCreate:
INSERT INTO FranchiseEntity (name, email, phone, base_price, currency, address_street, address_number, address_neighborhood, address_zip, address_city, address_country, tax_name, tax_id, zone, is_new, active)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

franchiseSelectAll:
SELECT * FROM FranchiseEntity;

franchiseSelectById:
SELECT * FROM FranchiseEntity WHERE id = ?;

franchiseUpdate:
UPDATE FranchiseEntity
SET name = ?, email = ?, phone = ?, base_price = ?, currency = ?, address_street = ?, address_number = ?, address_zip = ?, address_city = ?, address_country = ?, tax_name = ?, tax_id = ?, zone = ?, is_new = ?, active = ?
WHERE id = ?;

franchiseDelete:
DELETE FROM FranchiseEntity WHERE id = ?;

franchiseCount:
SELECT COUNT(*) FROM FranchiseEntity;

activeBranchesCount:
SELECT COUNT(*) FROM FranchiseEntity WHERE active = 1;

-- LevelEntity
CREATE TABLE LevelEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL
);

levelCreate:
INSERT INTO LevelEntity (name)
VALUES (?);

levelSelectAll:
SELECT * FROM LevelEntity;

levelSelectById:
SELECT * FROM LevelEntity WHERE id = ?;

levelUpdate:
UPDATE LevelEntity
SET name = ?
WHERE id = ?;

levelDelete:
DELETE FROM LevelEntity WHERE id = ?;

levelCount:
SELECT COUNT(*) FROM LevelEntity;

-- DisciplineEntity
CREATE TABLE DisciplineEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    level_id INTEGER NOT NULL,
    FOREIGN KEY(level_id) REFERENCES LevelEntity(id),
     UNIQUE(name, level_id)
);

disciplineCreate:
INSERT INTO DisciplineEntity (name, level_id)
VALUES (?, ?);

disciplineSelectAll:
SELECT d.id, d.name, d.level_id, l.name AS level_name
FROM DisciplineEntity d
JOIN LevelEntity l ON d.level_id = l.id;

disciplineSelectById:
SELECT d.id, d.name, d.level_id, l.name AS level_name
FROM DisciplineEntity d
JOIN LevelEntity l ON d.level_id = l.id
WHERE d.id = ?;

disciplineSelectByBaseName:
SELECT d.id, d.name, d.level_id, l.name AS level_name
FROM DisciplineEntity d
JOIN LevelEntity l ON d.level_id = l.id
WHERE d.name LIKE ? || '%';

disciplineUpdate:
UPDATE DisciplineEntity
SET name = ?, level_id = ?
WHERE id = ?;

disciplineDelete:
DELETE FROM DisciplineEntity WHERE id = ?;

disciplineCount:
SELECT COUNT(*) FROM DisciplineEntity;

-- FranchiseDisciplineEntity
CREATE TABLE FranchiseDisciplineEntity (
    franchise_id INTEGER NOT NULL,
    discipline_id INTEGER NOT NULL,
    PRIMARY KEY (franchise_id, discipline_id),
    FOREIGN KEY(franchise_id) REFERENCES FranchiseEntity(id),
    FOREIGN KEY(discipline_id) REFERENCES DisciplineEntity(id)
);

franchiseDisciplineCreate:
INSERT INTO FranchiseDisciplineEntity (franchise_id, discipline_id)
VALUES (?, ?);

franchiseDisciplineSelectAll:
SELECT * FROM FranchiseDisciplineEntity;

franchiseDisciplineSelectByFranchiseId:
SELECT * FROM FranchiseDisciplineEntity WHERE franchise_id = ?;

franchiseDisciplineUpdate:
UPDATE FranchiseDisciplineEntity
SET discipline_id = ?
WHERE franchise_id = ? AND discipline_id = ?;

franchiseDisciplineDelete:
DELETE FROM FranchiseDisciplineEntity WHERE franchise_id = ? AND discipline_id = ?;

franchiseDisciplineCount:
SELECT COUNT(*) FROM FranchiseDisciplineEntity;

-- ClassroomEntity
CREATE TABLE ClassroomEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    franchise_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    FOREIGN KEY(franchise_id) REFERENCES FranchiseEntity(id)
);

classroomCreate:
INSERT INTO ClassroomEntity (franchise_id, name)
VALUES (?, ?);

classroomSelectAll:
SELECT * FROM ClassroomEntity;

classroomSelectById:
SELECT * FROM ClassroomEntity WHERE id = ?;

classroomSelectByFranchiseId:
SELECT * FROM ClassroomEntity WHERE franchise_id = ?;

classroomUpdate:
UPDATE ClassroomEntity
SET franchise_id = ?, name = ?
WHERE id = ?;

classroomDelete:
DELETE FROM ClassroomEntity WHERE id = ?;

classroomCount:
SELECT COUNT(*) FROM ClassroomEntity;

-- TeacherEntity
CREATE TABLE TeacherEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    first_name TEXT NOT NULL,
    last_name_paternal TEXT,
    last_name_maternal TEXT,
    gender TEXT,
    birth_date TEXT,
    nationality TEXT,
    tax_id TEXT,
    phone TEXT,
    email TEXT,
    address_street TEXT,
    address_zip TEXT,
    emergency_contact_name TEXT,
    emergency_contact_phone TEXT,
    salary_per_hour REAL,
    start_date TEXT,
    active INTEGER NOT NULL DEFAULT 1 CHECK(active IN (0, 1)),
    vetoed INTEGER NOT NULL DEFAULT 0 CHECK(vetoed IN (0, 1))
);

teacherCreate:
INSERT INTO TeacherEntity (first_name, last_name_paternal, last_name_maternal, gender, birth_date, nationality, tax_id, phone, email, address_street, address_zip, emergency_contact_name, emergency_contact_phone, salary_per_hour, start_date, active, vetoed)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

teacherSelectAll:
SELECT * FROM TeacherEntity;

teacherSelectById:
SELECT * FROM TeacherEntity WHERE id = ?;

teacherUpdate:
UPDATE TeacherEntity
SET first_name = ?, last_name_paternal = ?, last_name_maternal = ?, gender = ?, birth_date = ?, nationality = ?, tax_id = ?, phone = ?, email = ?, address_street = ?, address_zip = ?, emergency_contact_name = ?, emergency_contact_phone = ?, salary_per_hour = ?, start_date = ?, active = ?, vetoed = ?
WHERE id = ?;

teacherDelete:
DELETE FROM TeacherEntity WHERE id = ?;

teacherCount:
SELECT COUNT(*) FROM TeacherEntity;

-- FranchiseeEntity
CREATE TABLE FranchiseeEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    franchise_id INTEGER NOT NULL,
    first_name TEXT NOT NULL,
    last_name_paternal TEXT,
    last_name_maternal TEXT,
    gender TEXT,
    birth_date TEXT,
    nationality TEXT,
    tax_id TEXT,
    phone TEXT,
    email TEXT,
    address_street TEXT,
    address_zip TEXT,
    emergency_contact_name TEXT,
    emergency_contact_phone TEXT,
    start_date TEXT,
    active INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY(franchise_id) REFERENCES FranchiseEntity(id)
);

franchiseeCreate:
INSERT INTO FranchiseeEntity (franchise_id, first_name, last_name_paternal, last_name_maternal, gender, birth_date, nationality, tax_id, phone, email, address_street, address_zip, emergency_contact_name, emergency_contact_phone, start_date, active)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

franchiseeSelectAll:
SELECT * FROM FranchiseeEntity;

franchiseeSelectById:
SELECT * FROM FranchiseeEntity WHERE id = ?;

franchiseeSelectByFranchiseId:
SELECT * FROM FranchiseeEntity WHERE franchise_id = ?;

franchiseeUpdate:
UPDATE FranchiseeEntity
SET franchise_id = ?, first_name = ?, last_name_paternal = ?, last_name_maternal = ?, gender = ?, birth_date = ?, nationality = ?, tax_id = ?, phone = ?, email = ?, address_street = ?, address_zip = ?, emergency_contact_name = ?, emergency_contact_phone = ?, start_date = ?, active = ?
WHERE id = ?;

franchiseeDelete:
DELETE FROM FranchiseeEntity WHERE id = ?;

franchiseeCount:
SELECT COUNT(*) FROM FranchiseeEntity;

-- FranchiseTeacherEntity
CREATE TABLE FranchiseTeacherEntity (
    franchise_id INTEGER NOT NULL,
    teacher_id INTEGER NOT NULL,
    PRIMARY KEY (franchise_id, teacher_id),
    FOREIGN KEY(franchise_id) REFERENCES FranchiseEntity(id),
    FOREIGN KEY(teacher_id) REFERENCES TeacherEntity(id)
);

franchiseTeacherCreate:
INSERT INTO FranchiseTeacherEntity (franchise_id, teacher_id)
VALUES (?, ?);

franchiseTeacherSelectAll:
SELECT * FROM FranchiseTeacherEntity;

franchiseTeacherSelectByFranchiseId:
SELECT * FROM FranchiseTeacherEntity WHERE franchise_id = ?;

franchiseTeacherUpdate:
UPDATE FranchiseTeacherEntity
SET teacher_id = ?
WHERE franchise_id = ? AND teacher_id = ?;

franchiseTeacherDelete:
DELETE FROM FranchiseTeacherEntity WHERE franchise_id = ? AND teacher_id = ?;

franchiseTeacherCount:
SELECT COUNT(*) FROM FranchiseTeacherEntity;

-- TeacherDisciplineEntity
CREATE TABLE TeacherDisciplineEntity (
    teacher_id INTEGER NOT NULL,
    discipline_id INTEGER NOT NULL,
    PRIMARY KEY (teacher_id, discipline_id),
    FOREIGN KEY(teacher_id) REFERENCES TeacherEntity(id),
    FOREIGN KEY(discipline_id) REFERENCES DisciplineEntity(id)
);

teacherDisciplineCreate:
INSERT INTO TeacherDisciplineEntity (teacher_id, discipline_id)
VALUES (?, ?);

teacherDisciplineSelectAll:
SELECT * FROM TeacherDisciplineEntity;

teacherDisciplineSelectByTeacherId:
SELECT * FROM TeacherDisciplineEntity WHERE teacher_id = ?;

teacherDisciplineUpdate:
UPDATE TeacherDisciplineEntity
SET discipline_id = ?
WHERE teacher_id = ? AND discipline_id = ?;

teacherDisciplineDelete:
DELETE FROM TeacherDisciplineEntity WHERE teacher_id = ? AND discipline_id = ?;

teacherDisciplineCount:
SELECT COUNT(*) FROM TeacherDisciplineEntity;

-- StudentEntity
CREATE TABLE StudentEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    franchise_id INTEGER NOT NULL,
    first_name TEXT NOT NULL,
    last_name_paternal TEXT,
    last_name_maternal TEXT,
    gender TEXT,
    birth_date TEXT,
    nationality TEXT,
    curp TEXT,
    phone TEXT,
    email TEXT,
    address_street TEXT,
    address_zip TEXT,
    parent_father_first_name TEXT,
    parent_father_last_name_paternal TEXT,
    parent_father_last_name_maternal TEXT,
    parent_mother_first_name TEXT,
    parent_mother_last_name_paternal TEXT,
    parent_mother_last_name_maternal TEXT,
    blood_type TEXT,
    chronic_disease TEXT,
    active INTEGER NOT NULL DEFAULT 1 CHECK(active IN (0, 1)),
    FOREIGN KEY(franchise_id) REFERENCES FranchiseEntity(id)
);

studentCreate:
INSERT INTO StudentEntity (franchise_id, first_name, last_name_paternal, last_name_maternal, gender, birth_date, nationality, curp, phone, email, address_street, address_zip, parent_father_first_name, parent_father_last_name_paternal, parent_father_last_name_maternal, parent_mother_first_name, parent_mother_last_name_paternal, parent_mother_last_name_maternal, blood_type, chronic_disease, active)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

studentSelectAll:
SELECT * FROM StudentEntity;

studentSelectById:
SELECT * FROM StudentEntity WHERE id = ?;

studentSelectByFranchiseId:
SELECT * FROM StudentEntity WHERE franchise_id = ?;

studentUpdate:
UPDATE StudentEntity
SET franchise_id = ?, first_name = ?, last_name_paternal = ?, last_name_maternal = ?, gender = ?, birth_date = ?, nationality = ?, curp = ?, phone = ?, email = ?, address_street = ?, address_zip = ?, parent_father_first_name = ?, parent_father_last_name_paternal = ?, parent_father_last_name_maternal = ?, parent_mother_first_name = ?, parent_mother_last_name_paternal = ?, parent_mother_last_name_maternal = ?, blood_type = ?, chronic_disease = ?, active = ?
WHERE id = ?;

studentDelete:
DELETE FROM StudentEntity WHERE id = ?;

studentCount:
SELECT COUNT(*) FROM StudentEntity;

-- StudentAuthorizedAdultEntity
CREATE TABLE StudentAuthorizedAdultEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id INTEGER NOT NULL,
    first_name TEXT NOT NULL,
    last_name_paternal TEXT,
    last_name_maternal TEXT,
    FOREIGN KEY(student_id) REFERENCES StudentEntity(id)
);

studentAuthorizedAdultCreate:
INSERT INTO StudentAuthorizedAdultEntity (student_id, first_name, last_name_paternal, last_name_maternal)
VALUES (?, ?, ?, ?);

studentAuthorizedAdultSelectAll:
SELECT * FROM StudentAuthorizedAdultEntity;

studentAuthorizedAdultSelectById:
SELECT * FROM StudentAuthorizedAdultEntity WHERE id = ?;

studentAuthorizedAdultSelectByStudentId:
SELECT * FROM StudentAuthorizedAdultEntity WHERE student_id = ?;

studentAuthorizedAdultUpdate:
UPDATE StudentAuthorizedAdultEntity
SET student_id = ?, first_name = ?, last_name_paternal = ?, last_name_maternal = ?
WHERE id = ?;

studentAuthorizedAdultDelete:
DELETE FROM StudentAuthorizedAdultEntity WHERE id = ?;

studentAuthorizedAdultCount:
SELECT COUNT(*) FROM StudentAuthorizedAdultEntity;

-- ScheduleEntity
CREATE TABLE ScheduleEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    franchise_id INTEGER NOT NULL,
    classroom_id INTEGER NOT NULL,
    teacher_id INTEGER NOT NULL,
    discipline_id INTEGER NOT NULL,
    day_of_week INTEGER NOT NULL,
    start_time TEXT NOT NULL,
    end_time TEXT NOT NULL,
    FOREIGN KEY(franchise_id) REFERENCES FranchiseEntity(id),
    FOREIGN KEY(classroom_id) REFERENCES ClassroomEntity(id),
    FOREIGN KEY(teacher_id) REFERENCES TeacherEntity(id),
    FOREIGN KEY(discipline_id) REFERENCES DisciplineEntity(id)
);

scheduleCreate:
INSERT INTO ScheduleEntity (franchise_id, classroom_id, teacher_id, discipline_id, day_of_week, start_time, end_time)
VALUES (?, ?, ?, ?, ?, ?, ?);

scheduleSelectAll:
SELECT * FROM ScheduleEntity;

scheduleSelectById:
SELECT * FROM ScheduleEntity WHERE id = ?;

scheduleSelectByFranchiseId:
SELECT * FROM ScheduleEntity WHERE franchise_id = ?;

scheduleUpdate:
UPDATE ScheduleEntity
SET franchise_id = ?, classroom_id = ?, teacher_id = ?, discipline_id = ?, day_of_week = ?, start_time = ?, end_time = ?
WHERE id = ?;

scheduleDelete:
DELETE FROM ScheduleEntity WHERE id = ?;

scheduleCount:
SELECT COUNT(*) FROM ScheduleEntity;

-- StudentScheduleEntity
CREATE TABLE StudentScheduleEntity (
    student_id INTEGER NOT NULL,
    schedule_id INTEGER NOT NULL,
    PRIMARY KEY (student_id, schedule_id),
    FOREIGN KEY(student_id) REFERENCES StudentEntity(id),
    FOREIGN KEY(schedule_id) REFERENCES ScheduleEntity(id)
);

studentScheduleCreate:
INSERT INTO StudentScheduleEntity (student_id, schedule_id)
VALUES (?, ?);

studentScheduleSelectAll:
SELECT * FROM StudentScheduleEntity;

studentScheduleSelectByStudentId:
SELECT * FROM StudentScheduleEntity WHERE student_id = ?;

studentScheduleUpdate:
UPDATE StudentScheduleEntity
SET schedule_id = ?
WHERE student_id = ? AND schedule_id = ?;

studentScheduleDelete:
DELETE FROM StudentScheduleEntity WHERE student_id = ? AND schedule_id = ?;

studentScheduleCount:
SELECT COUNT(*) FROM StudentScheduleEntity;

-- BoutiqueItemEntity
CREATE TABLE BoutiqueItemEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    description TEXT NOT NULL,
    code TEXT NOT NULL UNIQUE,
    line TEXT,
    franchise_price REAL,
    suggested_price REAL,
    country TEXT
);

boutiqueItemCreate:
INSERT INTO BoutiqueItemEntity (description, code, line, franchise_price, suggested_price, country)
VALUES (?, ?, ?, ?, ?, ?);

boutiqueItemSelectAll:
SELECT * FROM BoutiqueItemEntity;

boutiqueItemSelectById:
SELECT * FROM BoutiqueItemEntity WHERE id = ?;

boutiqueItemSelectByCode:
SELECT * FROM BoutiqueItemEntity WHERE code = ?;

boutiqueItemUpdate:
UPDATE BoutiqueItemEntity
SET description = ?, code = ?, line = ?, franchise_price = ?, suggested_price = ?, country = ?
WHERE id = ?;

boutiqueItemDelete:
DELETE FROM BoutiqueItemEntity WHERE id = ?;

boutiqueItemCount:
SELECT COUNT(*) FROM BoutiqueItemEntity;

-- FranchiseBoutiqueInventoryEntity
CREATE TABLE FranchiseBoutiqueInventoryEntity (
    franchise_id INTEGER NOT NULL,
    boutique_item_id INTEGER NOT NULL,
    stock INTEGER NOT NULL DEFAULT 0 CHECK(stock >= 0),
    sale_price REAL CHECK(sale_price >= 0 OR sale_price IS NULL),
    PRIMARY KEY (franchise_id, boutique_item_id),
    FOREIGN KEY(franchise_id) REFERENCES FranchiseEntity(id),
    FOREIGN KEY(boutique_item_id) REFERENCES BoutiqueItemEntity(id)
);

franchiseBoutiqueInventoryCreate:
INSERT INTO FranchiseBoutiqueInventoryEntity (franchise_id, boutique_item_id, stock, sale_price)
VALUES (?, ?, ?, ?);

franchiseBoutiqueInventorySelectAll:
SELECT * FROM FranchiseBoutiqueInventoryEntity;

franchiseBoutiqueInventorySelectByFranchiseId:
SELECT * FROM FranchiseBoutiqueInventoryEntity WHERE franchise_id = ?;

franchiseBoutiqueInventoryUpdate:
UPDATE FranchiseBoutiqueInventoryEntity
SET stock = ?, sale_price = ?
WHERE franchise_id = ? AND boutique_item_id = ?;

franchiseBoutiqueInventoryDelete:
DELETE FROM FranchiseBoutiqueInventoryEntity WHERE franchise_id = ? AND boutique_item_id = ?;

franchiseBoutiqueInventoryCount:
SELECT COUNT(*) FROM FranchiseBoutiqueInventoryEntity;

-- SnackItemEntity
CREATE TABLE SnackItemEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    franchise_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    code TEXT NOT NULL UNIQUE,
    stock INTEGER NOT NULL DEFAULT 0 CHECK(stock >= 0),
    price REAL NOT NULL CHECK(price >= 0),
    FOREIGN KEY(franchise_id) REFERENCES FranchiseEntity(id)
);

snackItemCreate:
INSERT INTO SnackItemEntity (franchise_id, name, code, stock, price)
VALUES (?, ?, ?, ?, ?);

snackItemSelectAll:
SELECT * FROM SnackItemEntity;

snackItemSelectById:
SELECT * FROM SnackItemEntity WHERE id = ?;

snackItemSelectByCode:
SELECT * FROM SnackItemEntity WHERE code = ?;

snackItemUpdate:
UPDATE SnackItemEntity
SET franchise_id = ?, name = ?, code = ?, stock = ?, price = ?
WHERE id = ?;

snackItemDelete:
DELETE FROM SnackItemEntity WHERE id = ?;

snackItemCount:
SELECT COUNT(*) FROM SnackItemEntity;

-- PromotionEntity
CREATE TABLE PromotionEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    start_date TEXT NOT NULL,
    end_date TEXT NOT NULL,
    discount_type TEXT NOT NULL,
    discount_value REAL NOT NULL,
    applicable_to_new INTEGER NOT NULL DEFAULT 0,
    applicable_to_active INTEGER NOT NULL DEFAULT 0
);

promotionCreate:
INSERT INTO PromotionEntity (name, start_date, end_date, discount_type, discount_value, applicable_to_new, applicable_to_active)
VALUES (?, ?, ?, ?, ?, ?, ?);

promotionSelectAll:
SELECT * FROM PromotionEntity;

promotionSelectById:
SELECT * FROM PromotionEntity WHERE id = ?;

promotionUpdate:
UPDATE PromotionEntity
SET name = ?, start_date = ?, end_date = ?, discount_type = ?, discount_value = ?, applicable_to_new = ?, applicable_to_active = ?
WHERE id = ?;

promotionDelete:
DELETE FROM PromotionEntity WHERE id = ?;

promotionCount:
SELECT COUNT(*) FROM PromotionEntity;

-- EventEntity
CREATE TABLE EventEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    description TEXT,
    event_date TEXT NOT NULL,
    type TEXT NOT NULL,
    cost REAL NOT NULL CHECK(cost >= 0),
        tickets_available INTEGER NOT NULL CHECK(tickets_available >= 0)
);

eventCreate:
INSERT INTO EventEntity (name, description, event_date, type, cost, tickets_available)
VALUES (?, ?, ?, ?, ?, ?);

eventSelectAll:
SELECT * FROM EventEntity;

eventSelectById:
SELECT * FROM EventEntity WHERE id = ?;

eventUpdate:
UPDATE EventEntity
SET name = ?, description = ?, event_date = ?, type = ?, cost = ?, tickets_available = ?
WHERE id = ?;

eventDelete:
DELETE FROM EventEntity WHERE id = ?;

eventCount:
SELECT COUNT(*) FROM EventEntity;

-- EventPaymentEntity
CREATE TABLE EventPaymentEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id INTEGER NOT NULL,
    franchise_id INTEGER NOT NULL,
    amount REAL NOT NULL,
    payment_date TEXT NOT NULL,
    payment_type TEXT NOT NULL,
    event_id INTEGER,
    reference TEXT,
    FOREIGN KEY(student_id) REFERENCES StudentEntity(id),
    FOREIGN KEY(franchise_id) REFERENCES FranchiseEntity(id),
    FOREIGN KEY(event_id) REFERENCES EventEntity(id)
);

-- EventPaymentEntity
eventPaymentCreate:
INSERT INTO EventPaymentEntity (student_id, franchise_id, amount, payment_date, payment_type, event_id, reference)
VALUES (?, ?, ?, ?, ?, ?, ?);

eventPaymentSelectAll:
SELECT * FROM EventPaymentEntity;

eventPaymentSelectById:
SELECT * FROM EventPaymentEntity WHERE id = ?;

eventPaymentSelectByStudentId:
SELECT * FROM EventPaymentEntity WHERE student_id = ?;

eventPaymentUpdate:
UPDATE EventPaymentEntity
SET student_id = ?, franchise_id = ?, amount = ?, payment_date = ?, payment_type = ?, event_id = ?, reference = ?
WHERE id = ?;

eventPaymentDelete:
DELETE FROM EventPaymentEntity WHERE id = ?;

eventPaymentCount:
SELECT COUNT(*) FROM EventPaymentEntity;

-- AdministrativeEntity
CREATE TABLE AdministrativeEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    franchise_id INTEGER NOT NULL,
    first_name TEXT NOT NULL,
    last_name_paternal TEXT,
    last_name_maternal TEXT,
    gender TEXT,
    birth_date TEXT,
    nationality TEXT,
    tax_id TEXT,
    nss TEXT,
    phone TEXT,
    email TEXT,
    address_street TEXT,
    address_zip TEXT,
    emergency_contact_name TEXT,
    emergency_contact_phone TEXT,
    position TEXT NOT NULL,
    salary REAL NOT NULL,
    start_date TEXT NOT NULL,
    active INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY(franchise_id) REFERENCES FranchiseEntity(id)
);

administrativeCreate:
INSERT INTO AdministrativeEntity (franchise_id, first_name, last_name_paternal, last_name_maternal, gender, birth_date, nationality, tax_id, nss, phone, email, address_street, address_zip, emergency_contact_name, emergency_contact_phone, position, salary, start_date, active)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

administrativeSelectAll:
SELECT * FROM AdministrativeEntity;

administrativeSelectById:
SELECT * FROM AdministrativeEntity WHERE id = ?;

administrativeSelectByFranchiseId:
SELECT * FROM AdministrativeEntity WHERE franchise_id = ?;

administrativeUpdate:
UPDATE AdministrativeEntity
SET franchise_id = ?, first_name = ?, last_name_paternal = ?, last_name_maternal = ?, gender = ?, birth_date = ?, nationality = ?, tax_id = ?, nss = ?, phone = ?, email = ?, address_street = ?, address_zip = ?, emergency_contact_name = ?, emergency_contact_phone = ?, position = ?, salary = ?, start_date = ?, active = ?
WHERE id = ?;

administrativeDelete:
DELETE FROM AdministrativeEntity WHERE id = ?;

administrativeCount:
SELECT COUNT(*) FROM AdministrativeEntity;

-- TrialClassEntity
CREATE TABLE TrialClassEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    franchise_id INTEGER NOT NULL,
    student_id INTEGER,
    adult_first_name TEXT,
    adult_last_name_paternal TEXT,
    adult_last_name_maternal TEXT,
    phone TEXT,
    email TEXT,
    student_first_name TEXT NOT NULL,
    student_last_name_paternal TEXT,
    student_last_name_maternal TEXT,
    age_years INTEGER NOT NULL,
    age_months INTEGER NOT NULL,
    discipline_id INTEGER NOT NULL,
    request_date TEXT NOT NULL,
    scheduled_date TEXT,
    scheduled_time TEXT,
    classroom_id INTEGER,
    teacher_id INTEGER,
    attendance INTEGER,
    cancellation_reason TEXT,
    how_discovered TEXT,
    FOREIGN KEY(franchise_id) REFERENCES FranchiseEntity(id),
    FOREIGN KEY(student_id) REFERENCES StudentEntity(id),
    FOREIGN KEY(discipline_id) REFERENCES DisciplineEntity(id),
    FOREIGN KEY(classroom_id) REFERENCES ClassroomEntity(id),
    FOREIGN KEY(teacher_id) REFERENCES TeacherEntity(id)
);

trialClassCreate:
INSERT INTO TrialClassEntity (franchise_id, student_id, adult_first_name, adult_last_name_paternal, adult_last_name_maternal, phone, email, student_first_name, student_last_name_paternal, student_last_name_maternal, age_years, age_months, discipline_id, request_date, scheduled_date, scheduled_time, classroom_id, teacher_id, attendance, cancellation_reason, how_discovered)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

trialClassSelectAll:
SELECT * FROM TrialClassEntity;

trialClassSelectById:
SELECT * FROM TrialClassEntity WHERE id = ?;

trialClassSelectByFranchiseId:
SELECT * FROM TrialClassEntity WHERE franchise_id = ?;

trialClassUpdate:
UPDATE TrialClassEntity
SET franchise_id = ?, student_id = ?, adult_first_name = ?, adult_last_name_paternal = ?, adult_last_name_maternal = ?, phone = ?, email = ?, student_first_name = ?, student_last_name_paternal = ?, student_last_name_maternal = ?, age_years = ?, age_months = ?, discipline_id = ?, request_date = ?, scheduled_date = ?, scheduled_time = ?, classroom_id = ?, teacher_id = ?, attendance = ?, cancellation_reason = ?, how_discovered = ?
WHERE id = ?;

trialClassDelete:
DELETE FROM TrialClassEntity WHERE id = ?;

trialClassCount:
SELECT COUNT(*) FROM TrialClassEntity;

-- TeacherReportEntity
CREATE TABLE TeacherReportEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    teacher_id INTEGER NOT NULL,
    franchise_id INTEGER NOT NULL,
    report_type TEXT NOT NULL,
    report_date TEXT NOT NULL,
    observation TEXT,
    FOREIGN KEY(teacher_id) REFERENCES TeacherEntity(id),
    FOREIGN KEY(franchise_id) REFERENCES FranchiseEntity(id)
);

teacherReportCreate:
INSERT INTO TeacherReportEntity (teacher_id, franchise_id, report_type, report_date, observation)
VALUES (?, ?, ?, ?, ?);

teacherReportSelectAll:
SELECT * FROM TeacherReportEntity;

teacherReportSelectById:
SELECT * FROM TeacherReportEntity WHERE id = ?;

teacherReportSelectByTeacherId:
SELECT * FROM TeacherReportEntity WHERE teacher_id = ?;

teacherReportUpdate:
UPDATE TeacherReportEntity
SET teacher_id = ?, franchise_id = ?, report_type = ?, report_date = ?, observation = ?
WHERE id = ?;

teacherReportDelete:
DELETE FROM TeacherReportEntity WHERE id = ?;

teacherReportCount:
SELECT COUNT(*) FROM TeacherReportEntity;

-- PrecioBaseEntity
CREATE TABLE PrecioBaseEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    precio REAL NOT NULL
);

precioBaseCreate:
INSERT INTO PrecioBaseEntity (precio)
VALUES (?);

precioBaseSelectAll:
SELECT * FROM PrecioBaseEntity;

precioBaseSelectById:
SELECT * FROM PrecioBaseEntity WHERE id = ?;

precioBaseUpdate:
UPDATE PrecioBaseEntity
SET precio = ?
WHERE id = ?;

precioBaseDelete:
DELETE FROM PrecioBaseEntity WHERE id = ?;

precioBaseCount:
SELECT COUNT(*) FROM PrecioBaseEntity;

-- InscriptionEntity
CREATE TABLE InscriptionEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    precio REAL NOT NULL
);

-- Consultas para InscriptionEntity
inscriptionCreate:
INSERT INTO InscriptionEntity (precio) VALUES (?);

inscriptionSelectAll:
SELECT * FROM InscriptionEntity;

inscriptionSelectById:
SELECT * FROM InscriptionEntity WHERE id = ?;

inscriptionUpdate:
UPDATE InscriptionEntity SET precio = ? WHERE id = ?;

inscriptionDelete:
DELETE FROM InscriptionEntity WHERE id = ?;

inscriptionCount:
SELECT COUNT(*) FROM InscriptionEntity;

-- MembershipEntity
CREATE TABLE MembershipEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    months_paid INTEGER NOT NULL,
    months_saved REAL NOT NULL
);

membershipCreate:
INSERT INTO MembershipEntity (name, months_paid, months_saved)
VALUES (?, ?, ?);

membershipSelectAll:
SELECT * FROM MembershipEntity;

membershipSelectById:
SELECT * FROM MembershipEntity WHERE id = ?;

membershipUpdate:
UPDATE MembershipEntity
SET name = ?, months_paid = ?, months_saved = ?
WHERE id = ?;

membershipDelete:
DELETE FROM MembershipEntity WHERE id = ?;

membershipCount:
SELECT COUNT(*) FROM MembershipEntity;

-- PaymentEntity
CREATE TABLE PaymentEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id INTEGER NOT NULL,
    amount REAL NOT NULL,
    description TEXT NOT NULL,
    payment_date TEXT NOT NULL,
    base_amount REAL NOT NULL,
    discount REAL NOT NULL,
    membership_info TEXT,
    inscription_id INTEGER,
    FOREIGN KEY(student_id) REFERENCES StudentEntity(id),
    FOREIGN KEY(inscription_id) REFERENCES InscriptionEntity(id)
);



-- Consultas para PaymentEntity
insertPayment:
INSERT INTO PaymentEntity (student_id, amount, description, payment_date, base_amount, discount, membership_info, inscription_id)
VALUES (?, ?, ?, ?, ?, ?, ?, ?);

getPaymentsByStudentId:
SELECT * FROM PaymentEntity
WHERE student_id = ?
ORDER BY payment_date DESC;

getAllPayments:
SELECT * FROM PaymentEntity;

getPaymentById:
SELECT * FROM PaymentEntity
WHERE id = ?;

updatePayment:
UPDATE PaymentEntity
SET student_id = ?, amount = ?, description = ?, payment_date = ?, base_amount = ?, discount = ?, membership_info = ?, inscription_id = ?
WHERE id = ?;

deletePayment:
DELETE FROM PaymentEntity
WHERE id = ?;

paymentCount:
SELECT COUNT(*) FROM PaymentEntity;

-- Nueva consulta para obtener alumnos por mes de nacimiento

studentSelectByBirthMonth:
SELECT * FROM StudentEntity
WHERE strftime('%m', birth_date) = ? AND active = 1;

-- Tabla de permisos por rol
CREATE TABLE RolePermissionEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    role_id INTEGER NOT NULL REFERENCES RoleEntity(id) ON DELETE CASCADE,
    permission TEXT NOT NULL
);

-- Consulta para obtener permisos activos de un usuario
userPermissionsByUserId:
SELECT DISTINCT
    rp.permission AS permission,
    rp.id AS permission_id
FROM UserRoleEntity ur
JOIN RolePermissionEntity rp ON ur.role_id = rp.role_id
WHERE ur.user_id = ?;

insertRolePermission:
INSERT INTO RolePermissionEntity (role_id, permission)
VALUES (?, ?);

getRolePermissions:
SELECT permission FROM RolePermissionEntity
WHERE role_id = ?;

deleteRolePermissions:
DELETE FROM RolePermissionEntity
WHERE role_id = ?;

deleteRolePermission:
DELETE FROM RolePermissionEntity
WHERE role_id = ? AND permission = ?;

userPermissionsByUserIdAndFranchise:
SELECT DISTINCT
    rp.permission AS permission,
    rp.id AS permission_id
FROM UserRoleEntity ur
JOIN RolePermissionEntity rp ON ur.role_id = rp.role_id
WHERE ur.user_id = ? AND ur.franchise_id = ?;

-- Búsquedas frecuentes por CURP
CREATE INDEX IF NOT EXISTS idx_student_curp ON StudentEntity(curp);

-- Filtros por franquicia (muy usados)
CREATE INDEX IF NOT EXISTS idx_student_franchise ON StudentEntity(franchise_id);
CREATE INDEX IF NOT EXISTS idx_schedule_franchise ON ScheduleEntity(franchise_id);
CREATE INDEX IF NOT EXISTS idx_administrative_franchise ON AdministrativeEntity(franchise_id);

-- Búsquedas de horarios por profesor
CREATE INDEX IF NOT EXISTS idx_schedule_teacher ON ScheduleEntity(teacher_id);
CREATE INDEX IF NOT EXISTS idx_schedule_classroom ON ScheduleEntity(classroom_id);

-- Búsqueda de pagos por estudiante
CREATE INDEX IF NOT EXISTS idx_payment_student ON PaymentEntity(student_id);
CREATE INDEX IF NOT EXISTS idx_event_payment_student ON EventPaymentEntity(student_id);

-- Búsquedas por estado activo
CREATE INDEX IF NOT EXISTS idx_student_active ON StudentEntity(active);
CREATE INDEX IF NOT EXISTS idx_teacher_active ON TeacherEntity(active);

-- Relaciones muchos a muchos (para JOINs)
CREATE INDEX IF NOT EXISTS idx_user_role_user ON UserRoleEntity(user_id);
CREATE INDEX IF NOT EXISTS idx_user_role_role ON UserRoleEntity(role_id);
CREATE INDEX IF NOT EXISTS idx_student_schedule_student ON StudentScheduleEntity(student_id);
CREATE INDEX IF NOT EXISTS idx_student_schedule_schedule ON StudentScheduleEntity(schedule_id);